# Kubernetes installation is fetched from: https://github.com/LiliC/travis-minikube
language: java
services: docker
sudo: required
# We need the systemd for the kubeadm and it's default from 16.04+
dist: xenial
env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config
script:
# Download kubectl, which is a requirement for using minikube.
- curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.35.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
- mkdir -p $HOME/.kube $HOME/.minikube
- touch $KUBECONFIG
- sudo minikube start --vm-driver=none --kubernetes-version=v1.13.0 
- "sudo chown -R travis: /home/travis/.minikube/"
- cd final
# Create the docker images
- mvn clean package -DskipTests 1>/dev/null
# Following is just to demo that the kubernetes cluster works.
- docker build -t hazelcast-spring-demo . 1>/dev/null
# Verify kube-addon-manager.
# kube-addon-manager is responsible for managing other kubernetes components, such as kube-dns, dashboard, storage-provisioner..
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lcomponent=kube-addon-manager -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-addon-manager to be available"; kubectl get pods --all-namespaces; done
# Wait for kube-dns to be ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl -n kube-system get pods -lk8s-app=kube-dns -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1;echo "waiting for kube-dns to be available"; kubectl get pods --all-namespaces; done
- docker images
- kubectl get pods
- kubectl apply -f rbac.yaml
- kubectl apply -f kubernetes.yaml
- kubectl get nodes
# Wait until the second pod to be ready
- until kubectl get pods | grep -q "hazelcast-spring-statefulset-1"; do sleep 1;echo "waiting for the second pod to be available"; done
- kubectl get pods
# Wait until the app to be started
- while true; do  response=$(curl --write-out %{http_code} --silent --output /dev/null "http://localhost:31000/put?key=key1&value=hazelcast"); if [ $response -eq 200 ]; then break; fi; echo "waiting for pods"; sleep 8; done;
# Apply integration test
- mvn -Dtest=HazelcastCachingIT test